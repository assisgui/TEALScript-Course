#pragma version 9

// This TEAL was generated by TEALScript v0.68.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp call_OptIn NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

abi_route_createApplication:
	// proposal: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string)void
	callsub createApplication
	int 1
	return

// createApplication(string)void
createApplication:
	proto 1 0

	// contracts/dao.algo.ts:16
	// this.proposal.value = proposal
	byte 0x70726f706f73616c // "proposal"
	frame_dig -1 // proposal: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

// optInToApplication()void
optInToApplication:
	proto 0 0
	retsub

abi_route_getProposal:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getProposal()string
	callsub getProposal
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// getProposal()string
getProposal:
	proto 0 1

	// contracts/dao.algo.ts:22
	// return this.proposal.value;
	byte 0x70726f706f73616c // "proposal"
	app_global_get
	extract 2 0
	retsub

abi_route_bootstrap:
	// The ABI return prefix
	byte 0x151f7c75

	// execute bootstrap()uint64
	callsub bootstrap
	itob
	concat
	log
	int 1
	return

// bootstrap()uint64
bootstrap:
	proto 0 1

	// contracts/dao.algo.ts:28
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/dao.algo.ts:31
	// assert(!this.registeredAsa.exists)
	txna Applications 0
	byte 0x72656769737465726564417361 // "registeredAsa"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/dao.algo.ts:34
	// this.registeredAsa.value = sendAssetCreation({
	//       configAssetTotal: 1_000,
	//       configAssetFreeze: this.app.address,
	//     })
	byte 0x72656769737465726564417361 // "registeredAsa"
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/dao.algo.ts:35
	// configAssetTotal: 1_000
	int 1_000
	itxn_field ConfigAssetTotal

	// contracts/dao.algo.ts:36
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put

	// contracts/dao.algo.ts:39
	// return this.registeredAsa.value;
	byte 0x72656769737465726564417361 // "registeredAsa"
	app_global_get
	retsub

abi_route_register:
	// registeredAsaP: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute register(asset)void
	callsub register
	int 1
	return

// register(asset)void
register:
	proto 1 0

	// contracts/dao.algo.ts:46
	// assert(registeredAsaP.id === this.registeredAsa.value.id)
	frame_dig -1 // registeredAsaP: Asset
	byte 0x72656769737465726564417361 // "registeredAsa"
	app_global_get
	==
	assert

	// contracts/dao.algo.ts:47
	// assert(this.txn.sender.assetBalance(this.registeredAsa.value) === 0)
	txn Sender
	byte 0x72656769737465726564417361 // "registeredAsa"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 0
	==
	assert

	// contracts/dao.algo.ts:49
	// sendAssetTransfer({
	//       xferAsset: this.registeredAsa.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: 1,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/dao.algo.ts:50
	// xferAsset: this.registeredAsa.value
	byte 0x72656769737465726564417361 // "registeredAsa"
	app_global_get
	itxn_field XferAsset

	// contracts/dao.algo.ts:51
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/dao.algo.ts:52
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/dao.algo.ts:55
	// sendAssetFreeze({
	//       freezeAsset: this.registeredAsa.value,
	//       freezeAssetAccount: this.txn.sender,
	//       freezeAssetFrozen: true,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts/dao.algo.ts:56
	// freezeAsset: this.registeredAsa.value
	byte 0x72656769737465726564417361 // "registeredAsa"
	app_global_get
	itxn_field FreezeAsset

	// contracts/dao.algo.ts:57
	// freezeAssetAccount: this.txn.sender
	txn Sender
	itxn_field FreezeAssetAccount

	// contracts/dao.algo.ts:58
	// freezeAssetFrozen: true
	int 1
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

abi_route_vote:
	// inFavor: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute vote(bool)void
	callsub vote
	int 1
	return

// vote(bool)void
vote:
	proto 1 0

	// contracts/dao.algo.ts:63
	// this.votesTotal.value += 1
	byte 0x766f746573546f74616c // "votesTotal"
	app_global_get
	int 1
	+
	byte 0x766f746573546f74616c // "votesTotal"
	swap
	app_global_put

	// if0_condition
	// contracts/dao.algo.ts:65
	// inFavor
	frame_dig -1 // inFavor: boolean
	bz if0_end

	// if0_consequent
	// contracts/dao.algo.ts:66
	// this.votesInFavor.value += 1
	byte 0x766f746573496e4661766f72 // "votesInFavor"
	app_global_get
	int 1
	+
	byte 0x766f746573496e4661766f72 // "votesInFavor"
	swap
	app_global_put

if0_end:
	// contracts/dao.algo.ts:69
	// assert(!this.alreadyVote(this.txn.sender).exists)
	txn Sender
	txna Applications 0
	byte 0x616c7265616479566f7465 // "alreadyVote"
	app_local_get_ex
	swap
	pop
	!
	assert

	// contracts/dao.algo.ts:70
	// this.alreadyVote(this.txn.sender).value = 1
	txn Sender
	byte 0x616c7265616479566f7465 // "alreadyVote"
	int 1
	app_local_put
	retsub

abi_route_getAppId:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getAppId()uint64
	callsub getAppId
	itob
	concat
	log
	int 1
	return

// getAppId()uint64
getAppId:
	proto 0 1

	// contracts/dao.algo.ts:74
	// return this.app.id;
	txna Applications 0
	retsub

abi_route_getVotesTotal:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getVotesTotal()(uint64,uint64)
	callsub getVotesTotal
	concat
	log
	int 1
	return

// getVotesTotal()(uint64,uint64)
getVotesTotal:
	proto 0 1

	// contracts/dao.algo.ts:78
	// return [this.votesTotal.value, this.votesInFavor.value];
	byte 0x766f746573546f74616c // "votesTotal"
	app_global_get
	itob
	byte 0x766f746573496e4661766f72 // "votesInFavor"
	app_global_get
	itob
	concat
	retsub

abi_route_getRegisteredAsa:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getRegisteredAsa()uint64
	callsub getRegisteredAsa
	itob
	concat
	log
	int 1
	return

// getRegisteredAsa()uint64
getRegisteredAsa:
	proto 0 1

	// contracts/dao.algo.ts:82
	// return this.registeredAsa.value;
	byte 0x72656769737465726564417361 // "registeredAsa"
	app_global_get
	retsub

abi_route_getAlreadyVote:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getAlreadyVote()uint64
	callsub getAlreadyVote
	itob
	concat
	log
	int 1
	return

// getAlreadyVote()uint64
getAlreadyVote:
	proto 0 1

	// contracts/dao.algo.ts:86
	// return this.alreadyVote(this.txn.sender).value;
	txn Sender
	byte 0x616c7265616479566f7465 // "alreadyVote"
	app_local_get
	retsub

create_NoOp:
	method "createApplication(string)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "getProposal()string"
	method "bootstrap()uint64"
	method "register(asset)void"
	method "vote(bool)void"
	method "getAppId()uint64"
	method "getVotesTotal()(uint64,uint64)"
	method "getRegisteredAsa()uint64"
	method "getAlreadyVote()uint64"
	txna ApplicationArgs 0
	match abi_route_getProposal abi_route_bootstrap abi_route_register abi_route_vote abi_route_getAppId abi_route_getVotesTotal abi_route_getRegisteredAsa abi_route_getAlreadyVote
	err

call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match abi_route_optInToApplication
	err